# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YH3qYUoVZUwE-9MvKIjjcob9NIY9LpNM
"""

pip install streamlit requests opencv-python streamlit-drawable-canvas inference-sdk

import streamlit as st
import cv2
import numpy as np
from PIL import Image
from io import BytesIO
from inference_sdk import InferenceHTTPClient
from streamlit_drawable_canvas import st_canvas

# Page setup
st.set_page_config(page_title="Cavity Detection", layout="wide")
st.title("ü¶∑ Cavity Detection with Editable Bounding Boxes")

# Roboflow API setup
CLIENT = InferenceHTTPClient(
    api_url="https://serverless.roboflow.com",
    api_key="byOqF4HnykvCt2y074mI"  # Your API key inserted here
)

MODEL_ID = "cavity-73rfa/3"

# Upload image
uploaded_file = st.file_uploader("Upload a dental X-ray", type=["jpg", "jpeg", "png"])

if uploaded_file:
    # Convert uploaded file to image
    image = Image.open(uploaded_file).convert("RGB")
    image_np = np.array(image)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Prepare image bytes for Roboflow API
    img_bytes = BytesIO()
    image.save(img_bytes, format="JPEG")
    img_bytes.seek(0)

    # Inference
    if st.button("Detect Cavities"):
        with st.spinner("Analyzing image using Roboflow..."):
            result = CLIENT.infer(img_bytes, model_id=MODEL_ID)

        boxes = []
        try:
            for pred in result['predictions']:
                x = int(pred['x'] - pred['width'] / 2)
                y = int(pred['y'] - pred['height'] / 2)
                w = int(pred['width'])
                h = int(pred['height'])
                boxes.append([x, y, w, h])

            st.success(f"‚úÖ Detected {len(boxes)} cavity region(s).")

            # Prepare shapes for editing
            shapes = []
            for x, y, w, h in boxes:
                shapes.append({
                    "type": "rect",
                    "x": x,
                    "y": y,
                    "width": w,
                    "height": h,
                    "stroke": "red",
                    "fill": "rgba(255, 0, 0, 0.3)"
                })

            # Show editable canvas
            st.markdown("### ‚úèÔ∏è Edit Boxes (move, resize, add more)")
            canvas_result = st_canvas(
                fill_color="rgba(0, 0, 0, 0)",
                stroke_width=2,
                stroke_color="red",
                background_image=image,
                update_streamlit=True,
                height=image.size[1],
                width=image.size[0],
                drawing_mode="rect",
                initial_drawing=shapes,
                key="canvas"
            )

            # Output edited boxes
            if canvas_result.json_data:
                st.subheader("üì¶ Edited Bounding Boxes JSON:")
                st.json(canvas_result.json_data["objects"])

        except Exception as e:
            st.error(f"‚ö†Ô∏è Error parsing response: {e}")